
# Setup

```{r setup}
#arules
#remotes::install_github('salvnetto/FootStats')

library(FootStats)  # data
library(tidymodels) # modeling
library(discrim)    # modeling
library(themis)     # modeling
library(tidyverse)  # data manipulation
library(zoo)        # data manipulation
library(vip)        # post fit analysis
library(caret)      # post fit analysis
library(pROC)       # post fit analysis

set.seed(123)
```

```{r importing data}
brasileirao_a_raw = FootStats::load_data('brazil', 'brasileirao_a')
```

# Data manipulation

```{r data manipulation}
#BRASILEIRAO
br_all = brasileirao_a_raw |> 
  filter(season == "2024") |> 
  arrange(season, round) |> 
  mutate(
    match_id = paste0(
      pmin(team_name, opponent),
      "_vs_",
      pmax(team_name, opponent),
      "_R", round
    )
  )

br = br_all |> 
  pivot_wider(
    id_cols = match_id,
    names_from = venue,
    names_sep = "_",
    values_from = where(is.numeric),
  ) |> 
  rename(
    season = season_Home,
    round = round_Home,
    attendance = attendance_Home,
    gf = gf_Home,
    ga = ga_Home,
  ) |> 
  select(
    -season_Away,
    -round_Away,
    -attendance_Away,
    -gf_Away,
    -ga_Away,
    -xga_Home,
    -xga_Away
  ) |> 
  left_join(
    br_all |> 
      filter(venue == "Home") |> 
      select(
        match_id, result, team_name, opponent, day, time, captain, referee, formation, opp.formation
      ),
    by = "match_id"
  ) |> 
  mutate(
    result_bi = case_when(
      result == "W" ~ "W",
      result == "D" ~ "DL",
      result == "L" ~ "DL"
    ) |> factor(levels = c("W", "DL"), ordered = TRUE),
    result = factor(result, levels = c("W", "D", "L"), ordered = TRUE),
    team_name = as.factor(team_name),
    opponent = as.factor(opponent),
    day = as.factor(day),
    time = as.factor(time),
    captain = as.factor(captain),
    referee = as.factor(referee),
    formation = as.factor(formation),
    opp.formation = as.factor(opp.formation)
  ) |> 
  mutate(
    across(
      ends_with("_Home"),
      ~ . - get(str_replace(cur_column(), "_Home$", "_Away")),
      .names = "diff_{str_replace(.col, '_Home$', '')}"
    )
  ) |> 
  group_by(team_name) |> 
  mutate(
    across(
      .cols = where(is.numeric),
      .fns  = ~ rollmean(.x, 3, fill = NA, align = "right"),
      .names = "mean_{.col}_l3m"
    )
  ) |> 
  ungroup() |> 
  select(
    -ends_with("_Home"),
    -ends_with("_Away"),
    -starts_with("diff_"),
    -mean_season_l3m,
    -mean_round_l3m
  )
```

# EDA

```{r data class proportion}
br %>% 
  count(result) %>% 
  mutate(prop = n/sum(n))

br %>% 
  count(result_bi) %>% 
  mutate(prop = n/sum(n))
```

```{r}
#xg e gf
br |> 
  ggplot(aes(x = mean_gf_l3m, y = mean_ga_l3m, col = result)) +
  geom_point() +
  theme_minimal()

br |> 
  ggplot(aes(x = mean_gf_l3m, y = mean_ga_l3m, col = result_bi)) +
  geom_point() +
  theme_minimal()
```

# Spliting

```{r data splitting}
set.seed(123)

splits <- initial_time_split(br, prop = .844)

br_other <- training(splits)
br_test  <- testing(splits)

resamples <- sliding_index(
  data = br_other |> arrange(round),
  index = round,
  lookback = 3L,
  assess_start = 1L,
  assess_stop = 1L,
  complete = TRUE,
  step = 1L,
  skip = 0L
)
```


```{r data splitting}
# training set proportions
br_other %>% 
  count(result) %>% 
  mutate(prop = n/sum(n))

br_other %>% 
  count(result_bi) %>% 
  mutate(prop = n/sum(n))

# test set proportions
br_test  %>% 
  count(result) %>% 
  mutate(prop = n/sum(n))

br_test  %>% 
  count(result_bi) %>% 
  mutate(prop = n/sum(n))
```

# Modeling

```{r model}
cores <- parallel::detectCores()

rf_mod <- 
  rand_forest(
    mode = "classification",
    mtry = tune(),
    trees = tune(),
    min_n = tune(),
  ) %>% 
  set_engine("ranger", num.threads = cores) 
```

```{r recipe}
basic_rec <- 
  recipe(result_bi ~ ., data = br_other) |>  
  step_rm(c(match_id, result, season, gf, ga))
```

```{r workflow}
rf_workflow <-
  workflow() |> 
  add_model(rf_mod) |> 
  add_recipe(basic_rec)
  
#workflow set
# wf_set <- 
#   workflow_set(
#     # pre-processing
#     preproc = list(
#       "base" = basic_rec
#     ),
#     models = list(
#       "rf" = rf_mod
#     ),
#     cross = FALSE #Setting cross = FALSE prevents pairing every recipe with every model twice.
#   )
```

```{r grid search}
rf_grid <- grid_random(
  mtry(range = c(25, 150)),
  trees(range = c(500, 2500)),
  min_n(range = c(2, 10)),
  size = 50
)

rf_res <-
  rf_workflow %>%
  tune_grid(
    resamples = resamples,
    grid = rf_grid,
    control = control_grid(save_pred = TRUE),
    metrics = metric_set(accuracy)
  )

# results <- wf_set |> 
#   workflow_map(
#     "tune_grid",
#     seed = 123,
#     resamples = val_set,
#     grid = 15,
#     control = control_grid(save_pred = TRUE),
#     metrics = metric_set(accuracy)
#   )
```

```{r best model}
rf_res %>%
  show_best(metric = "accuracy")

autoplot(rf_res)


rf_best <-
  rf_res %>%
  select_best(metric = "accuracy")
rf_best

# all_metrics <- collect_metrics(results)
# ranking <- rank_results(results)
# 
# all_metrics
# ranking
```


# Fit last model

```{r fit last model}
# the last model
last_rf_mod <- 
  rand_forest(mtry = 47, min_n = 8, trees = 1801) %>% 
  set_engine("ranger", num.threads = cores, importance = "impurity") %>% 
  set_mode("classification")

# the last workflow
last_rf_workflow <- 
  rf_workflow %>% 
  update_model(last_rf_mod)

# the last fit
last_rf_fit <- 
  last_rf_workflow %>% 
  last_fit(splits)

last_rf_fit

last_rf_fit %>% 
  collect_metrics()
```

# Post analysis

```{r post analysis fit}
last_rf_fit %>% 
  extract_fit_parsnip() %>% 
  vip::vip(num_features = 20)
```

```{r post analysis classification}
predicted = last_rf_fit |> 
  collect_predictions() |> 
  bind_cols(
    br_test |> 
      select(season, round, team_name, gf, ga, opponent)
    ) |> 
  mutate(
    .pred_class = factor(.pred_class, levels = c("W", "DL"), ordered = TRUE),
    result = factor(result_bi, levels = c("W", "DL"), ordered = TRUE),
  )
```

```{r confusion matrix}
caret::confusionMatrix(
  data = predicted$.pred_class,
  reference = predicted$result,
  mode = "everything"
)
```

```{r distribuition of probabilities}
predicted_long <- predicted |> 
  select(.pred_class, .pred_W, .pred_DL, result) |>
  pivot_longer(cols = c(.pred_W, .pred_DL), names_to = ".pred", values_to = "prob")
  
ggplot(predicted_long, aes(x = prob)) +
  geom_histogram(bins = 10) +
  facet_wrap(~ .pred)
```

```{r roc}
roc <- pROC::roc(
  response = predicted_long$result,
  predictor = predicted_long$prob,
  levels = c("W", "DL")
)

plot(roc)
```
